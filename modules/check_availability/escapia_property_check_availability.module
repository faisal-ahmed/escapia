<?php

/**
 * Implements hook_block_info().
 * @return mixed
 */
function escapia_property_check_availability_block_info() {
  $blocks['escapia_property_availability'] = array(
    'info'   => t('Escapia: Check Availability Form'),
    'region' => -1,
    'cache'  => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * @param string $delta
 * @return mixed
 */
function escapia_property_check_availability_block_view($delta = '') {
  if ($delta == 'escapia_property_availability') {
    $block['subject'] = 'Rates and Availability';
    $block['content'] = drupal_get_form('escapia_property_check_availability_request_form', arg(1));
    return $block;
  }
}

/**
 * The availability booking form.
 * @param $form
 * @param $form_state
 * @param $entity_id
 * @return mixed
 */
function escapia_property_check_availability_request_form($form, &$form_state, $entity_id) {
  drupal_add_js(drupal_get_path('module', 'escapia_property_check_availability') . '/js/check_availability.js', array('weight' => 100));

  $form['#attributes'] = array('id' => 'escapia-property-availability');

  $form_state['property_id'] = $entity_id;

  $disable = new stdClass();
  $disable->to = TRUE;

  $form['check-in'] = array(
    '#type' => 'pickadate_date',
    '#title' => t('Check-in Day'),
    '#settings' => pickadate_date_default_settings(array('selectMonths' => TRUE, 'min' => TRUE, 'format' => 'mmmm d, yyyy'))
  );

  $form['check-out'] = array(
    '#type' => 'pickadate_date',
    '#title' => t('Check-out Day'),
    '#settings' => pickadate_date_default_settings(array('selectMonths' => TRUE, 'min' => 7, 'format' => 'mmmm d, yyyy'))
  );

  $form['adults'] = array(
    '#type' => 'select',
    '#title' => t('Adults'),
    '#options' => array(1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10),
  );

  $form['children'] = array(
    '#type' => 'select',
    '#title' => t('Children'),
    '#options' => array(0 => 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Check Rates',
    '#attributes' => array('class' => array('button', 'info', 'radius', 'check-rates')),
    '#ajax' => array(
      'callback' => 'escapia_property_check_availability_fetch',
      'wrapper' => 'escapia-property-availability',
      'method' => 'replace',
      'effect' => 'fade',
      'prevent' => 'click',
      'progress' => array('type' => 'throbber', 'message' => t('Checking. Please wait...'), 'class' => array('rates-throbber')),
    )
  );

  $form['response'] = array(
    '#markup' => '',
  );

  $form['book-now'] = array(
    '#markup' => '',
  );

  $form['start-over'] = array(
    '#markup' => '',
  );

  $form['#validate'][] = 'escapia_property_check_availability_check_form_validate';
  $form['#submit'][] = 'escapia_property_check_availability_check_form_submit';

  return $form;
}

/**
 * Validation handler.
 * @param $form
 * @param $form_state
 */
function escapia_property_check_availability_check_form_validate($form, &$form_state) {
  $r = 1;
  if (!drupal_strlen($form_state['values']['check-in'])) {
    form_set_error('check-in', t('Please enter a check in date.'));
  }

  if (!drupal_strlen($form_state['values']['check-out'])) {
    form_set_error('check-in', t('Please enter a check out date.'));
  }

  if (strtotime($form_state['values']['check-in']) > strtotime($form_state['values']['check-out'])) {
    form_set_error('check-in', t('You cannot pick a check-in date that happens after a check-out date.'));
  }
}

/**
 * Submit handler.
 * @param $form
 * @param $form_state
 */
function escapia_property_check_availability_check_form_submit($form, &$form_state) {

}

/**
 * Callback for the AJAX submit in the Check Availability form.
 * @param $form
 * @param $form_state
 * @return array
 */
function escapia_property_check_availability_fetch($form, &$form_state) {
  if (!form_get_errors()) {
      // perform getUnitQuoteRequest call
    $wrapper = entity_metadata_wrapper('escapia_property', $form_state['property_id']);
    $connection = escapia_connection_load($wrapper->connection_id->value());
    $api = new EscapiaAPI($connection);
    $response = $api->getUnitQuoteRequest($wrapper->unit_code->value(), strtotime('midnight' . ' ' . $form_state['values']['check-in']), strtotime('midnight' . ' ' . $form_state['values']['check-out']), $form_state['values']['adults'], $form_state['values']['children']);

    if ($response) {
      $processed = escapia_property_check_availability_process_quote_response($response);
//      $form['response'] = array(
//        '#markup' => '<div class="response"><hr><h2><i class="rental-rate-icon"></i>Available!</h2><h3>Estimated Rate: ' . '$' . number_format($response['cost']) . '</h3>' . $response['booking_link'] . '</div>',
//      );
      $form['response'] = array('#markup' => $response->xmlResponse);
      $form['book-now'] = array('#markup' => l('Book Now', 'rentals/book-online/' . $wrapper->unit_code->value() . '/' . strtotime($form_state['values']['check-in']) . '/' . strtotime($form_state['values']['check-out'] . '/reserve'), array('attributes' => array('class' => array('button', 'medium', 'success')))));
      $form['start-over'] = array('#markup' => l('Check Another Date', '/', array('attributes' => array('class' => array('button', 'medium', 'warning')))));

    } else {
      $form['response'] = array(
        '#markup' => '<div class="response"><hr><p>This property is not available in the requested date range. Please try again.</p></div>',
      );
    }
  }

  global $theme;

  $theme_function = $theme . '_status_messages';

  if (!function_exists($theme_function)) {
    $theme_function = 'theme_status_messages';
  }

  $commands = array();
  $commands[] = ajax_command_replace('form#escapia-property-availability', render($form));
  $commands[] = ajax_command_html('.l-messages', $theme_function(array()));
  $commands[] = ajax_command_invoke('.alert-box', 'foundation', array('alert'));

  return array('#type' => 'ajax', '#commands' => $commands);
}

function escapia_property_check_availability_process_quote_response($soap_response) {
  $xml = simplexml_load_string($soap_response->xmlResponse);
  $xml->registerXPathNamespace("ns", EscapiaAPI::SOAP_NAMESPACE);

  // $data_array = (string) @end($xml->xpath('//ns:DailyAvailability'));
}