<?php

/**
 * Implements hook_entity_info().
 */
function escapia_connection_entity_info() {
  $info = array();

  $info['escapia_connection'] = array(
    'label' => t('Connection'),
    'plural label' => t('Connections'),
    'entity class' => 'EscapiaConnection',
    'controller class' => 'EscapiaConnectionController',
    'rules controller class' => 'EntityDefaultRulesController',
    'token type' => 'escapia_connection',
    'uri callback' => 'escapia_connection_uri',
    'base table' => 'escapia_connection',
    'module' => 'escapia_connection',
    'queryable' => TRUE,
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
    ),
    'bundles' => array(
      'escapia_connection' => array(
        'label' => t('Escapia Conection'),
        'admin' => array(
          'path' => 'admin/structure/escapia/connection'
        ),
      ),
    ),
    'access callback' => 'escapia_connection_access',
    'admin ui' => array(
      'path' => 'admin/structure/escapia/connection',
      'controller class' => 'EscapiaConnectionUIController',
      'menu wildcard' => '%escapia_connection',
    ),
    'view modes' => array(
      'full' => array(
        'label' => 'Full View',
        'custom settings' => FALSE,
      ),
      'search' => array(
        'label' => 'Search View',
        'custom settings' => TRUE,
      ),
      'list' => array(
        'label' => 'List View',
        'custom settings' => TRUE,
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_field_extra_fields().
 * @return array
 */
function escapia_connection_field_extra_fields() {
  $extra = array();

  $extra['escapia_connection']['escapia_connection'] = array(
    'display' => array(
      'label' => array(
        'label' => t('Label'),
        'description' => t('The label of the Escapia connection.'),
        'weight' => -10,
      ),
      'wsdl' => array(
        'label' => t('WSDL'),
        'description' => t('The WSDL url the Escapia connection utilizes.'),
        'weight' => -10,
      ),
      'username' => array(
        'label' => t('Username'),
        'description' => t('The username for the Escapia connection.'),
        'weight' => -10,
      ),
      'password' => array(
        'label' => t('Password'),
        'description' => t('The password for the Escapia connection.'),
        'weight' => -10,
      ),
      'active' => array(
        'label' => t('Active'),
        'description' => t('Whether or not this connection is in use.'),
        'weight' => -10,
      ),
    ),
  );

  return $extra;
}

/**
 * Implementation of hook_access for property entities.
 *
 * @param $op
 * @param null $type
 * @param null $account
 * @return bool
 */
function escapia_connection_access($op, $type = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Implements hook_admin_paths().
 * @return array
 */
function escapia_connection_admin_paths() {
  return array(
    'escapia_connection/*' => TRUE,
  );
}

/**
 * Overrides entity_class_uri.
 * @param EscapiaConnection $entity
 * @return array
 */
function escapia_connection_uri(EscapiaConnection $entity) {
  return array('path' => 'admin/structure/escapia/connection/' . $entity->id);
}

/**
 * Fetch an escapia_connection entity object.
 * @param $id
 * @param bool $reset
 * @return mixed
 * @see escapia_connection_load_multiple()
 */
function escapia_connection_load($id, $reset = FALSE) {
  $entities = escapia_connection_load_multiple(array($id), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple escapia_connection entities based on certain conditions.
 * @param $ids
 * @param $conditions
 * @param $reset
 * @return
 * @see entity_load()
 * @see escapia_connection_load()
 */
function escapia_connection_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('escapia_connection', $ids, $conditions, $reset);
}

/**
 * Menu router callback for rendering a view page.
 * @param $entity
 * @param string $view_mode
 * @param null $langcode
 * @param null $page
 * @return mixed
 */
function escapia_connection_view($entity, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  return entity_get_controller('escapia_connection')->view(array($entity), $view_mode, $langcode, $page);
}

/**
 * Title callback for escapia_connection entities.
 * @param $entity
 * @return mixed
 */
function escapia_connection_page_title($entity) {
  return $entity->label();
}

/**
 * Implements hook_ENTITY_TYPE_form().
 * @param $form
 * @param $form_state
 * @param $entity_type
 * @param string $op
 * @return mixed
 */
function escapia_connection_form($form, &$form_state, $entity_type, $op = 'edit') {
  if (isset($form_state['escapia_connection'])) {
    $entity = $form_state['escapia_connection'];
  }

  $form['connection'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#title' => t('Basic Connection Details'),
    '#description' => '<p>Enter the information below to setup a connection to use for talking to the Escapia system.</p>',
  );

  $form['connection']['label'] = array(
    '#title' => t('Label'),
    '#description' => t('The connection label.'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->label) ? $entity->label : '',
  );

  $form['connection']['wsdl'] = array(
    '#title' => t('WSDL Service Url'),
    '#description' => t('Specify the location of the Escapia WSDL service for this connection.'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->wsdl) ? $entity->wsdl : '',
  );

  $form['connection']['wsdl_content'] = array(
    '#title' => t('WSDL ServiceContent Url'),
    '#description' => t('Specify the location of the Escapia WSDL content service for this connection.'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->wsdl_content) ? $entity->wsdl_content : '',
  );

  $form['connection']['username'] = array(
    '#title' => t('Username'),
    '#description' => t('Specify the username to authenticate to the EscapiaAPI service for this connection.'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->username) ? $entity->username : '',
  );

  $form['connection']['password'] = array(
    '#title' => t('Password'),
    '#description' => t('Specify the password to authenticate to the EscapiaAPI service for this connection.'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->password) ? $entity->password : '',
  );

  $form['connection']['active'] = array(
    '#title' => t('Active'),
    '#description' => t('Specify if this connection should be active when fetching properties from Escapia.'),
    '#type' => 'checkbox',
    '#default_value' => isset($entity->active) ? $entity->active : FALSE,
  );

  $form['hapi'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('HAPI Details'),
    '#description' => '<p>If you are using in-site booking via the Escapia Property Booking module, enter the HAPI information below. It is required in order to generate credit card tokens to reserve a rental.</p>',
  );

  $form['hapi']['hapi_endpoint'] = array(
    '#title' => t('Endpoint URL'),
    '#description' => t('Specify the endpoint to the HAPI service to generate credit card tokens.'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->hapi_endpoint) ? $entity->hapi_endpoint : '',
  );

  $form['hapi']['hapi_api_key'] = array(
    '#title' => t('API Key'),
    '#description' => t('The HAPI API Key generated by the link provided to you from Escapia.'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->hapi_api_key) ? $entity->hapi_api_key : '',
  );

  $form['hapi']['hapi_client_id'] = array(
    '#title' => t('Client ID'),
    '#description' => t('The HAPI client ID assigned to you from Escapia. This is not the same as your Escapia username.'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->hapi_client_id) ? $entity->hapi_client_id : '',
  );

  field_attach_form('escapia_connection', $entity, $form, $form_state);

  $form['actions'] = array('#type' => 'actions');
  $form_state['op'] = ($op == 'create') ? 'Created' : 'Updated';

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 40,
  );

  return $form;
}

/**
 * Submit and save the entity.
 * @param $form
 * @param $form_state
 */
function escapia_connection_form_submit(&$form, &$form_state) {
  $entity = entity_ui_form_submit_build_entity($form, $form_state);
  entity_get_controller('escapia_connection')->save($entity);
  drupal_set_message(t('@op connection %label.', array('@op' => $form_state['op'], '%label' => $entity->label)));
  $form_state['redirect'] = 'admin/structure/escapia/connection';
}